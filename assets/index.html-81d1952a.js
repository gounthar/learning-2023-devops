import{_ as i,M as o,p as r,q as l,R as e,t as n,N as s,a1 as a}from"./framework-96b046e1.js";const d="/learning-2024-devops/assets/cicd-b5f3febe.png",c="/learning-2024-devops/assets/pipeline-b800f057.png",p="/learning-2024-devops/assets/runners-39887259.png",u={},h=a('<h1 id="ci-cd" tabindex="-1"><a class="header-anchor" href="#ci-cd" aria-hidden="true">#</a> CI/CD</h1><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition" aria-hidden="true">#</a> Definition</h2><p><img src="'+d+'" alt="cicd"></p><p>CI/CD, or Continuous Integration/Continuous Deployment, is a software development practice that involves automating the integration of code changes, testing, and deployment processes. It aims to streamline and automate the delivery pipeline, ensuring rapid and reliable software delivery.</p><p><strong>&quot;Continuous integration is a software development practice where members of a team integrate their work frequently... verified by an automated build (including tests) to detect integration errors&quot;</strong>, <em>Martin fowler</em></p><p>Integration in the context of CI/CD involves aligning and merging development efforts from various stages (such as development, staging, and production) to ensure that code changes seamlessly transition through these environments, maintaining consistency and reliability.</p><ul><li><strong>Development Environment</strong>: Developers work on their individual branches, integrating code changes regularly into a shared development branch. Continuous integration ensures that code changes from multiple developers align and work together in this environment.</li><li><strong>Staging Environment</strong>: Merged code changes from the development branch are further integrated into a staging branch or environment. Integration here involves validating code against a staging environment that mirrors the production environment closely.</li><li><strong>Production Environment</strong>: Once validated in the staging environment, integrated code changes are deployed to the production environment. Integration in the production environment ensures a smooth transition of tested and validated code to the live system.</li></ul><h2 id="market-overview" tabindex="-1"><a class="header-anchor" href="#market-overview" aria-hidden="true">#</a> Market overview</h2><table><thead><tr><th>Service</th><th>SCM/SVC (Version Control)</th><th>CI</th><th>CD</th><th>Issue Tracking</th><th>Issue Boards</th></tr></thead><tbody><tr><td><strong>Git</strong></td><td>✓</td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Mercurial (Hg)</strong></td><td>✓</td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Bitbucket</strong></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td><strong>GitHub</strong></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td><strong>GitLab</strong></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td><strong>Gitea</strong></td><td>✓</td><td></td><td></td><td></td><td></td></tr><tr><td><strong>Travis CI</strong></td><td></td><td>✓</td><td></td><td></td><td></td></tr><tr><td><strong>Jenkins</strong></td><td></td><td>✓</td><td>✓</td><td></td><td></td></tr><tr><td><strong>CircleCI</strong></td><td></td><td>✓</td><td></td><td></td><td></td></tr><tr><td><strong>Azure DevOps</strong></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td></tr><tr><td><strong>GitHub Actions</strong></td><td>✓</td><td>✓</td><td></td><td>✓</td><td></td></tr><tr><td><strong>Azure DevOps Pipelines</strong></td><td></td><td>✓</td><td>✓</td><td></td><td></td></tr><tr><td><strong>GitLab CI/CD</strong></td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td></tr><tr><td><strong>AWS CodePipeline</strong></td><td></td><td>✓</td><td>✓</td><td></td><td></td></tr><tr><td><strong>Google Cloud Build</strong></td><td></td><td>✓</td><td>✓</td><td></td><td></td></tr></tbody></table><h2 id="ci-cd-platform-gitlab" tabindex="-1"><a class="header-anchor" href="#ci-cd-platform-gitlab" aria-hidden="true">#</a> CI/CD Platform (GitLab)</h2><p>GitLab is a comprehensive DevOps platform that provides integrated CI/CD pipelines alongside version control, issue tracking, and more. It offers robust capabilities for automating software development processes, including building, testing, and deploying applications in a collaborative environment.</p><p>Its functionalities include:</p><ul><li><strong>Version Control:</strong> Robust Git repository management with merge requests, code review, and branching capabilities.</li><li><strong>CI/CD Pipelines:</strong> Automated build, test, and deployment pipelines for efficient software delivery.</li><li><strong>Issue Tracking:</strong> Integrated issue tracking system for project management and collaboration.</li><li><strong>Collaboration Tools:</strong> Wikis, snippets, code analytics, and merge request approvals for streamlined teamwork.</li><li><strong>Project Management:</strong> Extensive project planning, milestones, boards, and time tracking features.</li><li><strong>Security Scanning:</strong> Built-in security scanning tools for vulnerability management.</li><li><strong>Container Registry:</strong> Integrated container registry for storing Docker images.</li><li><strong>Kubernetes Integration:</strong> Seamless integration with Kubernetes for container orchestration.</li></ul><h3 id="ci-cd-features" tabindex="-1"><a class="header-anchor" href="#ci-cd-features" aria-hidden="true">#</a> CI/CD features</h3><h4 id="jobs-and-stages" tabindex="-1"><a class="header-anchor" href="#jobs-and-stages" aria-hidden="true">#</a> Jobs and stages</h4><p><img src="'+c+`" alt="pipeline"></p><p><strong>Jobs:</strong> Individual tasks defined in the <code>gitlab-ci.yml</code> file. They represent actions such as build, test, deploy, etc. <strong>Stages:</strong> Divisions in the pipeline where jobs are grouped. Typical stages include build, test, deploy, allowing sequential execution.</p><h4 id="gitlab-ci-yml-configuration" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-yml-configuration" aria-hidden="true">#</a> <code>gitlab-ci.yml</code> Configuration</h4><p>The <code>gitlab-ci.yml</code> is a configuration file at the root of your repository that defines the CI/CD pipeline, specifying jobs, stages, scripts, and configurations for the CI/CD process.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># This is an example GitLab CI/CD configuration file</span>

<span class="token comment"># Define the stages in the pipeline</span>
<span class="token key atrule">stages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> build
  <span class="token punctuation">-</span> test
  <span class="token punctuation">-</span> deploy

<span class="token comment"># Define variables for reuse across jobs</span>
<span class="token key atrule">variables</span><span class="token punctuation">:</span>
  <span class="token key atrule">ENVIRONMENT</span><span class="token punctuation">:</span> <span class="token string">&quot;production&quot;</span>
  <span class="token key atrule">APP_NAME</span><span class="token punctuation">:</span> <span class="token string">&quot;my-app&quot;</span>

<span class="token comment"># Jobs definition</span>
<span class="token key atrule">build_job</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo &quot;Building the application<span class="token punctuation">...</span>&quot;

<span class="token key atrule">test_job</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo &quot;Running tests<span class="token punctuation">...</span>&quot;
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master  <span class="token comment"># Run this job only on the master branch</span>

<span class="token key atrule">deploy_job</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo &quot;Deploying to $ENVIRONMENT<span class="token punctuation">...</span>&quot;
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> $ENVIRONMENT
    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.com/my<span class="token punctuation">-</span>app
  <span class="token key atrule">only</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> master  <span class="token comment"># Run this job only on the master branch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>stages</code>: Defines the stages in the pipeline: build, test, deploy.</li><li><code>variables</code>: Declares variables for reuse across jobs (<code>ENVIRONMENT</code>, <code>APP_NAME</code>).</li><li><code>build_job</code>, <code>test_job</code>, <code>deploy_job</code>: Jobs with their respective stages and scripts to execute.</li><li><code>only</code>: Specifies that certain jobs (<code>test_job</code>, <code>deploy_job</code>) should run only on the <code>master</code> branch.</li><li><code>environment</code>: Defines deployment-related information like the environment name and URL for the <code>deploy_job</code>.</li></ul><h4 id="runner-architecture" tabindex="-1"><a class="header-anchor" href="#runner-architecture" aria-hidden="true">#</a> Runner Architecture</h4><p><img src="`+p+'" alt="cicd"></p><ul><li><p><strong>GitLab Runner:</strong> independant processing power that executes CI/CD jobs defined in the <code>gitlab-ci.yml</code>. It can be installed on various platforms and supports different executor types like Shell, Docker, Kubernetes, etc.</p></li><li><p><strong>Executor Types:</strong> Determines how jobs are executed. For instance, Docker executor runs jobs inside Docker containers for isolated and reproducible environments.</p></li></ul><h3 id="ci-cd-for-developers" tabindex="-1"><a class="header-anchor" href="#ci-cd-for-developers" aria-hidden="true">#</a> CI/CD for Developers</h3><p>CI/CD for developers encompasses several key stages:</p><h4 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> Build</h4><p>The build stage involves compiling code, running automated builds, and generating artifacts or executable files from the source code.</p><h4 id="measure" tabindex="-1"><a class="header-anchor" href="#measure" aria-hidden="true">#</a> Measure</h4><p>Metrics and analytics are collected during the CI/CD pipeline to measure the performance and quality of the software being developed.</p><h4 id="document" tabindex="-1"><a class="header-anchor" href="#document" aria-hidden="true">#</a> Document</h4><p>Generate automatically the code documentation as your developper kit for newcomers , as SDK documentation for your client...</p><h4 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> Test</h4><p>Automated testing ensures that changes made to the codebase don&#39;t introduce bugs or issues.</p><h4 id="secure" tabindex="-1"><a class="header-anchor" href="#secure" aria-hidden="true">#</a> Secure</h4><p>Unit test your app, make fuctionnal testing, Security testing helps identify and address vulnerabilities in the code.</p><h4 id="deploy" tabindex="-1"><a class="header-anchor" href="#deploy" aria-hidden="true">#</a> Deploy</h4><p>The deployment phase involves automating the process of releasing applications into production or staging environments.</p><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises" aria-hidden="true">#</a> Exercises</h2><h3 id="🧪-exercice-1-build-your-ci-cd-server-with-docker" tabindex="-1"><a class="header-anchor" href="#🧪-exercice-1-build-your-ci-cd-server-with-docker" aria-hidden="true">#</a> 🧪 Exercice 1 : Build your CI/CD server with docker</h3><p>Create your gitlab onPremise service. Because gitlab is fully dockerized you are able to create a docker-compose.yml that create your platform locally.</p>',41),m={href:"https://docs.gitlab.com/ee/install/docker.html#install-gitlab-using-docker-compose",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,"Create a project on the local platform and push some code of your choice",-1),v=a(`<details class="custom-container details"><summary>solution</summary><p>*docker-compose.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token important">*gitlab-ci.yml*</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">gitlab-server</span><span class="token punctuation">:</span>
   <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;gitlab/gitlab-ce:latest&#39;</span>
   <span class="token key atrule">hostname</span><span class="token punctuation">:</span> <span class="token string">&#39;localhost&#39;</span>
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&#39;80:80&#39;</span>
    <span class="token punctuation">-</span> <span class="token string">&#39;22:22&#39;</span>
    <span class="token punctuation">-</span> <span class="token string">&#39;443:4443&#39;</span>
   <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token key atrule">GITLAB_OMNIBUS_CONFIG</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
      external_url &#39;http://docker.for.win.localhost&#39;</span>
   <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&#39;gitlab-data:/var/opt/gitlab&#39;</span>
    <span class="token punctuation">-</span> <span class="token string">&#39;C:\\gitlab-data:/etc/gitlab&#39;</span>
    <span class="token punctuation">-</span> <span class="token string">&#39;gitlab-logs:/var/log/gitlab&#39;</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">gitlab-data</span><span class="token punctuation">:</span>  
  <span class="token key atrule">gitlab-logs</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="custom-container tip"><p class="custom-container-title">Admin root password</p><p>After the service started you can retrieve the initial root password by going to <code>/etc/gitlab/initial_root_password</code> on the gitlab server.</p></div><h3 id="🧪-exercice-2-register-your-laptop-pc-as-a-docker-runner-to-build-your-pipelines-onpremise" tabindex="-1"><a class="header-anchor" href="#🧪-exercice-2-register-your-laptop-pc-as-a-docker-runner-to-build-your-pipelines-onpremise" aria-hidden="true">#</a> 🧪 Exercice 2 : Register your laptop PC as a <code>docker</code> runner to build your pipelines onPremise</h3>`,3),b={href:"https://docs.gitlab.com/runner/install/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.gitlab.com/ee/tutorials/create_register_first_runner/index.html",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"gitlab-ci.yml",-1),f=a(`<details class="custom-container details"><summary>solution</summary><p><em>add to the previous docker-compose.yml</em></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">runner</span><span class="token punctuation">:</span>
   <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;gitlab/gitlab-runner:latest&#39;</span>
   <span class="token key atrule">hostname</span><span class="token punctuation">:</span> <span class="token string">&#39;localhost&#39;</span>
   <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
   <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> DOCKER_HOST=tcp<span class="token punctuation">:</span>//docker.for.win.localhost<span class="token punctuation">:</span><span class="token number">2375</span>
   <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    
    <span class="token punctuation">-</span> C<span class="token punctuation">:</span>\\gitlab<span class="token punctuation">-</span>runner<span class="token punctuation">-</span>data\\config<span class="token punctuation">:</span>/etc/gitlab<span class="token punctuation">-</span>runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="🧪-exercise-3-a-full-pipeline-for-a-project-of-your-choice-on-a-saas-ci-cd-platform" tabindex="-1"><a class="header-anchor" href="#🧪-exercise-3-a-full-pipeline-for-a-project-of-your-choice-on-a-saas-ci-cd-platform" aria-hidden="true">#</a> 🧪 Exercise 3 - A full pipeline for a project of your choice on a SaaS CI/CD platform</h3><ul><li>Please select a project of your choice (JEE, node, python, android...)</li><li>Push the code to gitlab.com or github.com</li><li>Write a complete pipeline with CI/CD stage and jobs by searching for the right tooling on docker HUB</li><li>fill up your gitlab-ci.yml or github actions to have the 6 CI/CD steps automated ( Build, measure, document... cf. the course)</li></ul>`,3),_={class:"custom-container details"},C=e("summary",null,"solution",-1),x=e("em",null,"A solution for a simple JAVA project",-1),I={href:"https://gitlab.com/brah/devops-sample-java",target:"_blank",rel:"noopener noreferrer"},D=e("h2",{id:"📖-further-reading",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#📖-further-reading","aria-hidden":"true"},"#"),n(" 📖 Further reading")],-1);function w(j,E){const t=o("ExternalLinkIcon");return r(),l("div",null,[h,e("ul",null,[e("li",null,[n("Create the docker-compose.yml and start your server "),e("ul",null,[e("li",null,[e("a",m,[n("https://docs.gitlab.com/ee/install/docker.html#install-gitlab-using-docker-compose"),s(t)])])])]),g]),v,e("p",null,[n("Add a runner that can be the same computer - "),e("a",b,[n("https://docs.gitlab.com/runner/install/"),s(t)]),n(" - "),e("a",k,[n("https://docs.gitlab.com/ee/tutorials/create_register_first_runner/index.html"),s(t)]),n(" Configure your pipepline ("),y,n(") with a single stage with an simple echo as script and test that the runner is used.")]),f,e("details",_,[C,e("p",null,[x,e("a",I,[n("https://gitlab.com/brah/devops-sample-java"),s(t)])])]),D])}const A=i(u,[["render",w],["__file","index.html.vue"]]);export{A as default};
